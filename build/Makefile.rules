# Copyright 2021, Alex Waterman <imnotlistening@gmail.com> -*- mode: makefile -*-
#
# This file is part of r5sim.
#
# r5sim is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# r5sim is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with r5sim.  If not, see <https://www.gnu.org/licenses/>.
# Some general rules that can be used for building C files, etc.
#
# Some variables that can be set in the config.mk:
#
# USE_SYMTABLE=1
#
#    Build a symbol table into the resulting binary. This won't be
#    used for an application; applications are of course expected
#    to run in a real hosted environment with GDB, etc, and thus
#    this is unnecessary.
#
#

.SECONDEXPANSION:
.SUFFIXES:

DEPDIR := .deps
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.d

# Handle the OBJS input; we'll build .o files directly, we'll
# sub-build for "objects" ending in '/'.
subobj_name = $(1).$(patsubst %/,%,$(1)).o

_objs       = $(filter %.o,$(OBJS))
_dirs       = $(filter %/,$(OBJS))
_dir_objs   = $(foreach dir,$(_dirs),$(call subobj_name,$(dir)))
_final_objs = $(_objs) $(_dir_objs)
_lds        = $(notdir $(CURDIR)).lds
dir_obj     = .$(notdir $(CURDIR)).o

MAKE.R      = $(MAKE) -f $(R5SIM_DIR)/build/recurse.mk --no-print-directory

# Export some environment variables for the sub-makefiles.
export CC CFLAGS INCLUDES LIBS CONFIG_PATH
export LD LDFLAGS OBJCOPY NM

# Build sub-dir objects.
.PHONY: $(_dirs)
$(_dirs):
	@$(MAKE.R) -C $@ build

$(_dir_objs): $(_dirs)
	@:

# Special target to group up all built objects in the current dir.
$(dir_obj): $(_objs) $(_dir_objs)
	@echo "  [LD]\t\t$@"
ifeq ($(USE_SYMTABLE),1)
	$(VERBOSE)$(LD) $(LDFLAGS) -T $(_lds) -r -o $@ $(_final_objs)
else
	$(VERBOSE)$(LD) $(LDFLAGS) -r -o $@ $(_final_objs)
endif

# Build C based object files.
%.o : %.c $(DEPDIR)/%.d | $(DEPDIR)
	@echo "  [CC]\t\t$@"
	$(VERBOSE)$(CC) $(DEPFLAGS) $(CFLAGS) $(INCLUDES) -c -o $@ $<

# Assemble object files.
%.o : %.S $(DEPDIR)/%.d | $(DEPDIR)
	@echo "  [AS]\t\t$@"
	$(VERBOSE)$(CC) $(DEPFLAGS) $(CFLAGS) $(INCLUDES) -c -o $@ $<

# Link binary blobs; for free standing things.
ifeq ($(USE_SYMTABLE),1)
% : %.lds $(dir_obj)
# At this point we have the main dir_obj .o file; so generate some
# symbols. Note that link #1 is the creation of dir_obj.
	@echo "  [GEN]\t\t.symbols.S"
	$(VERBOSE)$(NM) -n $(dir_obj) | grep '\( [tT] \)' | grep -v ' \.' | \
		$(SCRIPTS)/syms.py > .symbols.S
	@echo "  [AS]\t\t.symbols.o"
	$(VERBOSE)$(CC) $(DEPFLAGS) $(CFLAGS) $(INCLUDES) -c -o .symbols.o .symbols.S

# Now we have the .symbols.o file, so link #2: include the symbols.o.
	@echo "  [LD]\t\t.tmp_$@"
	$(VERBOSE)$(LD) $(LDFLAGS) -T $< -o .tmp_$@ $(dir_obj) .symbols.o

# And generate the 2nd symbol table.
	@echo "  [GEN]\t\tsymbols.S"
	$(VERBOSE)$(NM) -n .tmp_$@ | grep '\( [tT] \)' | grep -v ' \.' | \
		$(SCRIPTS)/syms.py > symbols.S
	@echo "  [AS]\t\tsymbols.o"
	$(VERBOSE)$(CC) $(DEPFLAGS) $(CFLAGS) $(INCLUDES) -c -o symbols.o symbols.S

# Do the third link.
	@echo "  [LD]\t\t$@"
	$(VERBOSE)$(LD) $(LDFLAGS) -T $< -o $@ $(dir_obj) symbols.o

else
% : %.lds $(dir_obj)
	@echo "  [LD]\t\t$@"
	$(VERBOSE)$(LD) $(LDFLAGS) -T $< -o $@ $(dir_obj)
endif

# Link an app from the stuff we've built in this dir.
$(APP): $(dir_obj)
	@echo "  [LD]\t\t$@"
	$(VERBOSE)$(CC) $(CFLAGS) -o $@ $(dir_obj) $(LIBS)

build: $(dir_obj) $(APP) $(BIN)
	@:

##
## Installation targets.
##

# Installation target for applications. It's a trivial copy.
install-app:
	$(VERBOSE)if [ x$(APP) != x ]; then \
		echo "  [INSTALL]\t"$(APP) ; \
		cp $(APP) $(INSTALL_DIR); \
	fi

# Installation target for binaries; these go through objcopy
# first.
install-bin:
	$(VERBOSE)if [ x$(BIN) != x ]; then \
		echo "  [INSTALL]\t"$(BIN) ; \
		$(OBJCOPY) -O binary $(BIN) $(INSTALL_DIR)/$(BIN) ; \
	fi

.PHONY: install
install: install-app install-bin

##
## Cleaning targets.
##

submake-clean:
	@for d in $(_dirs); do					\
		$(MAKE) --no-print-directory -C $$d 		\
			-f $(R5SIM_DIR)/build/recurse.mk clean ; \
	done

# Clean target to wipe out all built files.
.PHONY: clean
clean: submake-clean
	$(VERBOSE)rm -rf *.o $(BIN) $(APP) .deps .config.*
	$(VERBOSE)rm -rf $(EXTRA_CLEAN)

##
## Config related targets.
##

# If CONFIG_PATH is not set then that means we are the top level Makefile
# and need to attempt to build a .config.h and .config.mk. We'll then set
# CONFIG_PATH to the path where lower level makefiles can find the right
# config includes.
#
# The sub-make files will not see these targets since they shouldn't need
# them. The configs will have been built by the parent.
ifeq ($(CONFIG_PATH),)

CONFIG_PATH=$(shell pwd)

# Update CFLAGS to auto include the .config.h file.
CFLAGS += -include $(CONFIG_PATH)/.config.h

# Find all the source config files so we can be sure to rebuild our configs
# if they change.
CONFIG_SRC = $(shell find -type f -name Config)

$(CONFIG_PATH)/.config.mk: $(CONFIG) $(CONFIG_SRC)
	$(VERBOSE)$(SCRIPTS)/config.py Config $(CONFIG)

endif

##
## Compilation header dependency tracking.
##

$(DEPDIR):
	$(VERBOSE)mkdir -p $@

_dep_c  = $(wildcard *.c)
_dep_S  = $(wildcard *.S)
DEPFILES = $(_dep_c:%.c=$(DEPDIR)/%.d) $(_dep_S:%.S=$(DEPDIR)/%.d)
$(DEPFILES):

-include $(DEPFILES)

ifneq ($(findstring clean,$(MAKECMDGOALS)),clean)
-include $(CONFIG_PATH)/.config.mk
endif
